#
# NOTE: THIS DOCKERFILE IS GENERATED VIA "update.sh"
#
# PLEASE DO NOT EDIT IT DIRECTLY.
#

FROM debian:jessie

# prevent Debian's PHP packages from being installed
# https://github.com/docker-library/php/pull/542
# RUN set -eux; \
# 	{ \
# 	echo 'Package: php*'; \
# 	echo 'Pin: release *'; \
# 	echo 'Pin-Priority: -1'; \
# 	} > /etc/apt/preferences.d/no-debian-php

# dependencies required for running "phpize"
# (see persistent deps below)
ENV PHPIZE_DEPS \
	autoconf \
	dpkg-dev \
	file \
	g++ \
	gcc \
	libc-dev \
	make \
	pkg-config \
	re2c 

# persistent / runtime deps
RUN apt-get update && apt-get install -y \
	$PHPIZE_DEPS \
	ca-certificates \
	curl \
	xz-utils \
	libpcre3 \
	librecode0 \
	libmysqlclient-dev \
	libsqlite3-0 \
	libxml2 \
	# other tools
	sudo \
	cron \
	git \
	wget \
	python \
	vim \
	unzip \
	mysql-client \
	zip \
	apt-utils \
	supervisor \
	# php 5.3 needs older autoconf
	# --enable-mysqlnd is included below because it's harder to compile after the fact the extensions are (since it's a plugin for several extensions, not an extension in itself)
	autoconf2.13 \ 
	libcurl4-openssl-dev \
	libpcre3-dev \
	libreadline6-dev \
	librecode-dev \
	libsqlite3-dev \
	libssl-dev \
	libxml2-dev \
	libfreetype6-dev \
	libjpeg62-turbo-dev \
	#====安裝mcrypt====
	libmcrypt-dev \
	#==================
	libpng-dev \
	libmagickwand-dev \
	libldb-dev \
	libldap2-dev \
	libsasl2-dev \
	libgeoip-dev \
	libpq-dev \
	libzip-dev \
	libbz2-dev \
	libgd2-dev \
	libjpeg-dev \
	libgif-dev \
	--no-install-recommends && rm -r /var/lib/apt/lists/* \
	&& ln -s /usr/lib/x86_64-linux-gnu/libssl.so  /usr/lib \
	&& export PHP_OPENSSL_DIR=yes 

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
RUN apt-get update \
	&& apt-get install -y --no-install-recommends \
	apache2 \
	&& rm -rf /var/lib/apt/lists/*

ENV APACHE_CONFDIR /etc/apache2
ENV APACHE_ENVVARS $APACHE_CONFDIR/envvars

RUN set -eux; \
	\
	# generically convert lines like
	#   export APACHE_RUN_USER=www-data
	# into
	#   : ${APACHE_RUN_USER:=www-data}
	#   export APACHE_RUN_USER
	# so that they can be overridden at runtime ("-e APACHE_RUN_USER=...")
	sed -ri 's/^export ([^=]+)=(.*)$/: ${\1:=\2}\nexport \1/' "$APACHE_ENVVARS"; \
	\
	# setup directories and permissions
	. "$APACHE_ENVVARS"; \
	for dir in \
	"$APACHE_LOCK_DIR" \
	"$APACHE_RUN_DIR" \
	"$APACHE_LOG_DIR" \
	/var/www/html \
	; do \
	rm -rvf "$dir"; \
	mkdir -p "$dir"; \
	chown "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$dir"; \
	# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)
	chmod 777 "$dir"; \
	done; \
	\
	# logs should go to stdout / stderr
	ln -sfT /dev/stderr "$APACHE_LOG_DIR/error.log"; \
	ln -sfT /dev/stdout "$APACHE_LOG_DIR/access.log"; \
	ln -sfT /dev/stdout "$APACHE_LOG_DIR/other_vhosts_access.log"; \
	chown -R --no-dereference "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$APACHE_LOG_DIR"

# Apache + PHP requires preforking Apache for best results
RUN a2dismod mpm_event && a2enmod mpm_prefork

# PHP files should be handled by PHP, and should be preferred over any other file type
RUN { \
	echo '<FilesMatch \.php$>'; \
	echo '\tSetHandler application/x-httpd-php'; \
	echo '</FilesMatch>'; \
	echo; \
	echo 'DirectoryIndex disabled'; \
	echo 'DirectoryIndex index.php index.html'; \
	echo; \
	echo '<Directory /var/www/>'; \
	echo '\tOptions -Indexes'; \
	echo '\tAllowOverride All'; \
	echo '</Directory>'; \
	} | tee "$APACHE_CONFDIR/conf-available/docker-php.conf" \
	&& a2enconf docker-php

ENV PHP_EXTRA_BUILD_DEPS apache2-dev
ENV PHP_EXTRA_CONFIGURE_ARGS --with-apxs2 --disable-cgi
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
# ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
# ENV PHP_CPPFLAGS="$PHP_CFLAGS"
# ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

# compile openssl, otherwise --with-openssl won't work
RUN set -xe \
	&& OPENSSL_VERSION="1.0.2g" \
	&& cd /tmp \
	&& mkdir openssl \
	&& curl -sL "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz" -o openssl.tar.gz \
	&& curl -sL "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz.asc" -o openssl.tar.gz.asc \
	&& tar -xzf openssl.tar.gz -C openssl --strip-components=1 \
	&& cd /tmp/openssl \
	&& ./config \
	&& make depend \
	&& make -j"$(nproc)" \
	&& make install \
	&& rm -rf /tmp/* \
	&& export PHP_OPENSSL_DIR=yes

ENV PHP_VERSION 5.3.29
COPY docker-php-* /usr/local/bin/

# php 5.3 needs older autoconf
# --enable-mysqlnd is included below because it's harder to compile after the fact the extensions are (since it's a plugin for several extensions, not an extension in itself)
RUN set -xe \
	&& mkdir -p /usr/src/php \
	&& curl -SL "http://php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror" -o /usr/src/php.tar.xz \
	&& curl -SL "http://php.net/get/php-$PHP_VERSION.tar.xz.asc/from/this/mirror" -o /usr/src/php.tar.xz.asc \
	&& cd /usr/src \
	&& docker-php-source extract \
	&& mkdir -p /usr/include/freetype2/freetype \
	&& ln -s /usr/include/freetype2/freetype.h /usr/include/freetype2/freetype/freetype.h \
	&& cd /usr/src/php \
	&& ./configure \
	--with-config-file-path="$PHP_INI_DIR" \
	--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
	--enable-fpm \
	--with-fpm-user=www-data \
	--with-fpm-group=www-data \
	--disable-cgi \
	--enable-mysqlnd \
	--with-mysql \
	--with-curl \
	--with-openssl=/usr/local/ssl \
	--with-readline \
	--with-recode \
	--with-zlib \
	--enable-ftp \
	--enable-mbstring \
	--enable-zip \
	--enable-pcntl \
	--with-pdo-mysql \
	--with-mysqli \
	--with-bz2 \
	--with-gd \
	--with-jpeg-dir \
	--with-up-dir \
	--with-pcre-regex \
	# configure: error: Cannot find OpenSSL's libraries
	# --with-libdir="x86_64-linux-gnu" \
	&& make -j"$(nproc)" \
	&& make install \
	&& make clean \
	&& { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \ 
	# find extensions's so and put it in php extensions folder & "produce ini files" in php/conf.d
	&& docker-php-ext-install -j$(nproc) exif hash sockets xml zip pcntl bcmath gettext\
	&& docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/  \
	&& docker-php-ext-install -j$(nproc) gd \
	&& docker-php-ext-install -j$(nproc) pdo_mysql mysqli \
	# && docker-php-ext-install -j$(nproc) pgsql pdo_pgsql ctype\
	&& cd / \
	&& docker-php-source delete \
	&& DEBIAN_FRONTEND=noninteractive apt-get purge -qq -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
	&& rm -rf /var/lib/apt/lists/*

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

#安裝composer
RUN EXPECTED_SIGNATURE=$(wget -q -O - https://composer.github.io/installer.sig); \
	php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"; \
	ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');"); \
	php composer-setup.php; \
	php -r "unlink('composer-setup.php');"; \
	mv composer.phar /usr/local/bin/composer; 

RUN  pecl install xdebug-2.2.4 \
	#  pecl install redis \
	#  pecl install imagick \
	&& docker-php-ext-enable xdebug


ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##
COPY apache2-foreground /usr/local/bin/
WORKDIR /var/www/html

RUN	echo 'export TERM=xterm-256color' >> ~/.bashrc; \
	echo 'alias ll="ls -al"' >> ~/.bashrc; \
	mkdir -p /var/lib/php/session; \
	chown -R www-data:www-data /var/lib/php/session 

EXPOSE 80
CMD ["apache2-foreground"]
##</autogenerated>##
